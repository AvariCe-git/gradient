#!/bin/bash


##############################################
#
# This script creates a 16bit png test image,
# and converts it to a 10bit UHD test video to
# test the color depth support of UHD TV sets.
#
##############################################

# command specifications
x265="x265"
x264="x264"

# check dependencies
hash convert 2>/dev/null || { echo >&2 "This script requires ImageMagic but it's not installed.  Aborting."; exit 1; }

hash ffmpeg 2>/dev/null || { echo >&2 "This script requires ffmpeg but it's not installed.  Aborting."; exit 1; }
ffmpeg -pix_fmts 2>&1 |grep yuv444p10 >/dev/null || { echo >&2 "It seems to me, that ffmpeg was not built with 10bit support.  Aborting."; exit 1; }

hash $x265 2>/dev/null || { echo >&2 "This script requires x256 but it's not installed. You can download it from http://x265.org. Please make sure, you build it with 10bit support! Aborting."; exit 1; }
$x265 --version 2>&1 |grep "build" |grep 10bit >/dev/null || { echo >&2 "It seems to me, that x265 was not built with 10bit support! Aborting. (see https://bitbucket.org/multicoreware/x265/wiki/Home)"; exit 1; }

hash $x264 2>/dev/null || { echo >&2 "This script requires x254 but it's not installed. Please make sure, you build it with 10bit support! Aborting."; exit 1; }
$x264 --version 2>&1 |grep "bit-depth=10" >/dev/null || { echo >&2 "It seems to me, that x264 was not built with 10bit support (--bit-depth=10)! Aborting."; exit 1; }

hash MP4Box 2>/dev/null || { echo >&2 "This script requires GPAC but it's not installed. Aborting."; exit 1; }


# check TMPDIR
if [ ! -d "$TMPDIR" ]; then
  TMPDIR="./"
fi


# check if gradient.png exists, if not, create it
if [ -f gradient.png ]; then
  echo "skip gradient creation, gradient.png file does exist"

else
  echo "creating empty canvas"
  convert -depth 16 -size 3840x2160 xc:white gradient.png

  height=216

  echo "creating blue 8 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 255); do
    color=$(printf "#%04x%04xffff" $(($i * 256)) $(($i * 256)) )
    x1=$(($i * 15))
    y1=$(($height * 0 + 3))
    x2=$(($x1 + 14))
    y2=$(($height * 1 - 1))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" -fill \"#000000\" -draw \"line $x2,$y1 $x2,$(($y1 + 10))\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '8bit blue gradient (you should see 256 vertical bars)' "
  command=$command"gradient.png"
  eval  $command

  echo "creating blue 10 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    color=$(printf "#%04x%04xffff" $(($i * 64)) $(($i * 64)) )
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 1 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 2 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '10bit blue gradient (you should see 1024 vertical bars, if your display supports 10-bit color depth)' "
  command=$command"gradient.png"
  eval  $command

  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 1 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 2 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"#000000\" -draw \"line $x2,$y2 $x2,$(($y2 - 10))\" "
  done
  command=$command"gradient.png"
  eval  $command



  echo "creating green 8 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 255); do
    color=$(printf "#%04xffff%04x" $(($i * 256)) $(($i * 256)) )
    x1=$(($i * 15))
    y1=$(($height * 2 + 3))
    x2=$(($x1 + 14))
    y2=$(($height * 3 - 1))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" -fill \"#000000\" -draw \"line $x2,$y1 $x2,$(($y1 + 10))\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '8bit green gradient (you should see 256 vertical bars)' "
  command=$command"gradient.png"
  eval  $command

  echo "creating green 10 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    color=$(printf "#%04xffff%04x" $(($i * 64)) $(($i * 64)) )
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 3 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 4 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '10bit green gradient (you should see 1024 vertical bars, if your display supports 10-bit color depth)' "
  command=$command"gradient.png"
  eval  $command

  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 3 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 4 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"#000000\" -draw \"line $x2,$y2 $x2,$(($y2 - 10))\" "
  done
  command=$command"gradient.png"
  eval  $command


  echo "creating red 8 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 255); do
    color=$(printf "#ffff%04x%04x" $(($i * 256)) $(($i * 256)) )
    x1=$(($i * 15))
    y1=$(($height * 4 + 3))
    x2=$(($x1 + 14))
    y2=$(($height * 5 - 1))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" -fill \"#000000\" -draw \"line $x2,$y1 $x2,$(($y1 + 10))\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '8bit red gradient (you should see 256 vertical bars)' "
  command=$command"gradient.png"
  eval  $command

  echo "creating red 10 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    color=$(printf "#ffff%04x%04x" $(($i * 64)) $(($i * 64)) )
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 5 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 6 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" "
  done
  command=$command"-fill \"#000000000000\" -pointsize 36 -annotate +50+$(($y1 + 110)) '10bit red gradient (you should see 1024 vertical bars, if your display supports 10-bit color depth)' "
  command=$command"gradient.png"
  eval  $command

  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 5 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 6 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"#000000\" -draw \"line $x2,$y2 $x2,$(($y2 - 10))\" "
  done
  command=$command"gradient.png"
  eval  $command



  echo "creating gray 8 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 255); do
    color=$(printf "#%04x%04x%04x" $(($i * 256)) $(($i * 256)) $(($i * 256)) )
    x1=$(($i * 15))
    y1=$(($height * 6 + 3))
    x2=$(($x1 + 14))
    y2=$(($height * 7 - 1))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" -fill \"#000000\" -draw \"line $x2,$y1 $x2,$(($y1 + 10))\" "
  done
  command=$command"-fill \"#ffffffffffff\" -pointsize 36 -annotate +50+$(($y1 + 110)) '8bit gray gradient (you should see 256 vertical bars)' "
  command=$command"gradient.png"
  eval  $command

  echo "creating gray 10 bit gradient"
  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    color=$(printf "#%04x%04x%04x" $(($i * 64)) $(($i * 64)) $(($i * 64)) )
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 7 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 8 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" "
  done
  command=$command"-fill \"#ffffffffffff\" -pointsize 36 -annotate +50+$(($y1 + 110)) '10bit gray gradient (you should see 1024 vertical bars, if your display supports 10-bit color depth)' "
  command=$command"gradient.png"
  eval  $command

  command="convert -depth 16 gradient.png "
  for i in $(seq 0 1023); do
    x1=$(printf "%.0f" $(echo "$i * 3.75" |bc))
    y1=$(($height * 7 + 1))
    x2=$(printf "%.0f" $(echo "($i + 1) * 3.75 - 0.999999" |bc))
    y2=$(($height * 8 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"#000000\" -draw \"line $x2,$y2 $x2,$(($y2 - 10))\" "
  done
  command=$command"gradient.png"
  eval  $command



  echo "creating gray 8 bit gradient"
  command="convert -depth 16 gradient.png "
  for j in $(seq 128 191); do
    color=$(printf "#%04x%04x%04x" $(($j * 256)) $(($j * 256)) $(($j * 256)) )
    i=$(($j - 128))
    x1=$(($i * 60))
    y1=$(($height * 8 + 3))
    x2=$(($x1 + 59))
    y2=$(($height * 9 - 1))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" -fill \"#000000\" -draw \"line $x2,$y1 $x2,$(($y1 + 10))\" "
  done
  command=$command"-fill \"#ffffffffffff\" -pointsize 36 -annotate +50+$(($y1 + 110)) '8bit gray50%-gray75% gradient (you should see 64 vertical bars)' "
  command=$command"gradient.png"
  eval  $command

  echo "creating gray 10 bit gradient"
  command="convert -depth 16 gradient.png "
  for j in $(seq 512 767); do
    color=$(printf "#%04x%04x%04x" $(($j * 64)) $(($j * 64)) $(($j * 64)) )
    i=$(($j - 512))
    x1=$(($i * 15))
    y1=$(($height * 9 + 1))
    x2=$(($x1 + 14))
    y2=$(($height * 10 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"$color\" -draw \"rectangle $x1,$y1 $x2,$y2\" "
  done
  command=$command"-fill \"#ffffffffffff\" -pointsize 36 -annotate +50+$(($y1 + 110)) '10bit gray50%-gray75% gradient (you should see 256 vertical bars, if your display supports 10-bit color depth)' "
  command=$command"gradient.png"
  eval  $command

  command="convert -depth 16 gradient.png "
  for j in $(seq 512 767); do
    i=$(($j - 512))
    x1=$(($i * 15))
    y1=$(($height * 9 + 1))
    x2=$(($x1 + 14))
    y2=$(($height * 10 - 3))
    #echo $color $x1 $y1 $x2 $y2
    command=$command"-fill \"#000000\" -draw \"line $x2,$y2 $x2,$(($y2 - 10))\" "
  done
  command=$command"gradient.png"
  eval  $command



  convert -depth 16 gradient.png -fill "#ffffffffffff" -pointsize 16 -gravity SouthEast -annotate +0+30 'gradient v1.1 - http://jursonovics.com - This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.' gradient.png

fi


# encode and package video with x265 10-bit support...
if [ ! -f gradient.mp4 ]; then

  echo "converting png to h265 raw video file"
  ffmpeg -y -loop 1 -t 10 -framerate 5 -i gradient.png -f yuv4mpegpipe -pix_fmt yuv420p10 -strict -1 - | $x265 --y4m --preset veryslow --bitrate 10000 -o $TMPDIR/gradient.265 -

  echo "packaging h265 file"
  MP4Box -add $TMPDIR/gradient.265 gradient.mp4
fi

# encode and package video with x264 10-bit support...
if [ ! -f gradient_x264.mp4 ]; then

  echo "converting png to h264 raw video file"
  ffmpeg -y -loop 1 -t 10 -framerate 5 -i gradient.png -f yuv4mpegpipe -pix_fmt yuv420p10 -strict -1 - | $x264 --preset veryslow --bitrate 10000 -o $TMPDIR/gradient.264 dev/stdin

  echo "packaging h264 file"
  MP4Box -add $TMPDIR/gradient.264 gradient_x264.mp4
fi



